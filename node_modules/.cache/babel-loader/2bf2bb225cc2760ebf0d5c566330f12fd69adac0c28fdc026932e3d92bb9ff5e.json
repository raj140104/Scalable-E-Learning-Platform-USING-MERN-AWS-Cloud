{"ast":null,"code":"import{useEffect}from\"react\";// This hook detects clicks outside of the specified component and calls the provided handler function.\nexport default function useOnClickOutside(ref,handler){useEffect(()=>{// Define the listener function to be called on click/touch events\nconst listener=event=>{// If the click/touch event originated inside the ref element, do nothing\nif(!ref.current||ref.current.contains(event.target)){return;}// Otherwise, call the provided handler function\nhandler(event);};// Add event listeners for mousedown and touchstart events on the document\ndocument.addEventListener(\"mousedown\",listener);document.addEventListener(\"touchstart\",listener);// Cleanup function to remove the event listeners when the component unmounts or when the ref/handler dependencies change\nreturn()=>{document.removeEventListener(\"mousedown\",listener);document.removeEventListener(\"touchstart\",listener);};},[ref,handler]);// Only run this effect when the ref or handler function changes\n}","map":{"version":3,"names":["useEffect","useOnClickOutside","ref","handler","listener","event","current","contains","target","document","addEventListener","removeEventListener"],"sources":["C:/Users/rites/Downloads/7th sem/7th Sem Project/Study-pilot/Study-pilot/src/hooks/useOnClickOutside.js"],"sourcesContent":["import { useEffect } from \"react\";\n\n// This hook detects clicks outside of the specified component and calls the provided handler function.\nexport default function useOnClickOutside(ref, handler) {\n  useEffect(() => {\n    // Define the listener function to be called on click/touch events\n    const listener = (event) => {\n      // If the click/touch event originated inside the ref element, do nothing\n      if (!ref.current || ref.current.contains(event.target)) {\n        return;\n      }\n      // Otherwise, call the provided handler function\n      handler(event);\n    };\n\n    // Add event listeners for mousedown and touchstart events on the document\n    document.addEventListener(\"mousedown\", listener);\n    document.addEventListener(\"touchstart\", listener);\n\n    // Cleanup function to remove the event listeners when the component unmounts or when the ref/handler dependencies change\n    return () => {\n      document.removeEventListener(\"mousedown\", listener);\n      document.removeEventListener(\"touchstart\", listener);\n    };\n  }, [ref, handler]); // Only run this effect when the ref or handler function changes\n}"],"mappings":"AAAA,OAASA,SAAS,KAAQ,OAAO,CAEjC;AACA,cAAe,SAAS,CAAAC,iBAAiBA,CAACC,GAAG,CAAEC,OAAO,CAAE,CACtDH,SAAS,CAAC,IAAM,CACd;AACA,KAAM,CAAAI,QAAQ,CAAIC,KAAK,EAAK,CAC1B;AACA,GAAI,CAACH,GAAG,CAACI,OAAO,EAAIJ,GAAG,CAACI,OAAO,CAACC,QAAQ,CAACF,KAAK,CAACG,MAAM,CAAC,CAAE,CACtD,OACF,CACA;AACAL,OAAO,CAACE,KAAK,CAAC,CAChB,CAAC,CAED;AACAI,QAAQ,CAACC,gBAAgB,CAAC,WAAW,CAAEN,QAAQ,CAAC,CAChDK,QAAQ,CAACC,gBAAgB,CAAC,YAAY,CAAEN,QAAQ,CAAC,CAEjD;AACA,MAAO,IAAM,CACXK,QAAQ,CAACE,mBAAmB,CAAC,WAAW,CAAEP,QAAQ,CAAC,CACnDK,QAAQ,CAACE,mBAAmB,CAAC,YAAY,CAAEP,QAAQ,CAAC,CACtD,CAAC,CACH,CAAC,CAAE,CAACF,GAAG,CAAEC,OAAO,CAAC,CAAC,CAAE;AACtB"},"metadata":{},"sourceType":"module","externalDependencies":[]}